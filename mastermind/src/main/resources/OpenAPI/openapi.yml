openapi: '3.0.3'
info:
  title: API Title
  version: '1.0'
servers:
  - url: https://localhost:8080
    description: Local dev server

tags:
  - name: Players
    description: Player management operations
  - name: Rooms
    description: Game room management operations

paths:
  /players:
    get:
      description: Returns all players in JSON
      tags:
        - Players
      responses:
        '200':
          description: Players found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '500':
          description: Server error, unable to return players
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /players/{username}:
    get:
      description: Returns the player details for a given unique username.
      tags:
        - Players
      parameters:
        - name: username
          in: path
          description: The username of the player to retrieve.
          required: true
          schema:
            type: string
          example: 'john_doe'
      responses:
        '200':
          description: Player found by username successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          description: Player not found with the given username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    delete:
      description: Deletes specified player
      tags:
        - Players
      parameters:
        - name: username
          in: path
          description: The player to be deleted.
          required: true
          schema:
            type: string
          example: "john123"
      responses:
        '204':
          description: Player deleted successfully
        '404':
          description: Player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /players/create-player:
    post:
      description: Gets or creates a new player with the specified username
      tags:
        - Players
      requestBody:
        description: Player object to be retrieved or created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        '201':
          description: Player created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
  /rooms/secret-all-rooms:
    get:
      description: Returns all room data
      tags:
        - Rooms
      responses:
        '200':
          description: Rooms found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'

  /rooms/{roomName}/secret:
    get:
      description: Returns specified room data
      tags:
        - Rooms
      parameters:
        - name: roomName
          in: path
          description: The unique name of the room
          required: true
          schema:
            type: string
          example: "room1"
      responses:
        '200':
          description: Room found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: Room with specified room name not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /rooms/{roomName}:
    get:
      description: Returns specified room data. Excludes mastercode but includes remaining guesses.
      tags:
        - Rooms
      parameters:
        - name: roomName
          in: path
          description: The unique name of the room
          required: true
          schema:
            type: string
          example: "room1"
      responses:
        '200':
          description: Room found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerRoomViewDTO'
        '403':
          description: Insufficient permissions, player is not room host.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '404':
          description: Room with specified room name not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    delete:
      description: Deletes the specified room
      tags:
        - Rooms
      parameters:
        - name: roomName
          in: path
          description: The unique name of the room to delete.
          required: true
          schema:
            type: string
          example: "room1"
      responses:
        '204':
          description: Room deleted successfully
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      description: Partially updates a room. Able to update difficulty and started.
      tags:
        - Rooms
      parameters:
        - name: roomName
          in: path
          required: true
          schema:
            type: string
          example: "room1"
      requestBody:
        description: RoomUpdate object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomUpdateDTO'
      responses:
        '200':
          description: Room updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerRoomViewDTO'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /rooms/create-room:
    post:
      description: Retrieves a room or creates a new room
      tags:
        - Rooms
      requestBody:
        description: RoomCreationDTO containing data for room creation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomCreationDTO'
      responses:
        '201':
          description: Room created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerRoomViewDTO'
        '403':
          description: Insufficient permissions to enter the room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '404':
          description: No username found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /rooms/{roomName}/submit-guess:
    post:
      description: Submits a client's guess to the room
      tags:
        - Rooms
      parameters:
        - name: roomName
          in: path
          description: The unique name of the room
          required: true
          schema:
            type: string
          example: "room1"
      requestBody:
        description: PlayerGuessDTO object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerGuessDTO'
      responses:
        '201':
          description: Guess created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerGuess'
        '400':
          description: Game has not been started, or game has been completed, or invalid guess input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '403':
          description: Insufficient permissions to submit guess, player is not the room's host.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '404':
          description: Unable to find room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /rooms/{roomName}/reset:
    post:
      description: Resets the room, generating new mastercode and deleting all player guesses
      tags: 
        - Rooms
      parameters:
        - name: roomName
          in: path
          required: true
          schema:
            type: string
          example: "room1"
      requestBody:
        description: RoomUpdate object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomUpdateDTO'
      responses:
        '200':
          description: OK


components:
  schemas:
    Player:
      type: object
      properties:
        username:
          type: string
          description: The player's unique username.
          example: "John123"
      required:
        - username

    Room:
      type: object
      properties:
        roomName:
          type: string
          description: The room's unique name (min 5, max = 100).
          example: "John123's room"
        host:
          type: object
          description: The room's creator represented by their Player object.
          example: Player John123
        difficulty:
          type: integer
          description: How many digits are generated for the mastercode (Min = 4, Max = 6).
          example: 4
        started:
          type: boolean
          description: A boolean that determines whether players can submit guesses. If started is false, players cannot submit guesses. If started is true players can submit guesses.
        mastercode:
          type: string
          description: A string with length the same as the room's difficulty
          example: "1234"
        guessList:
          type: array
          description: An array containing all of the player's guesses
          items: 
            $ref: '#/components/schemas/PlayerGuess'
        completed:
          type: boolean
          description: A boolean that represents if a game has completed.
      required:
        - roomName
        - host
        - difficulty
        - started
        - mastercode
        - guessList
    
    RoomCreationDTO:
      type: object
      properties:
        roomName:
          type: string
          description: The unique name for the room
          example: "room1"
        difficulty:
          type: integer
          description: How many digits are generated for the mastercode.
          example: 4
      required:
        - roomName
        - difficulty

    RoomUpdateDTO:
      type: object
      properties:
        difficulty:
          type: integer
          description: How many digits are generated for the mastercode.
          example: 4
        started:
          type: boolean
          description: A boolean that determines whether players can submit guesses. If started is false, players cannot submit guesses. If started is true players can submit guesses.
        resetMastercode:
          type: boolean
          description: A boolean that determines whether the mastercode is reset. If true the mastercode is reset.

    PlayerGuess:
      type: object
      properties:
        playerGuess:
          type: string
          description: A string with the same number of digits as the difficulty of the room
          example: "1234"
        correctGuess:
          type: boolean
          description: Flags if the guess matches the mastercode or not
        feedback:
          type: string
          description: Detailed feedback including the player's guess, exactmatches, matching numbers, and remaining guesses.
        remainingGuesses:
          type: integer
          description: Number of guesses remaining
      required:
        - playerGuess
        - correctGuess
        - feedback
        - remainingGuesses

    PlayerGuessDTO:
      type: object
      properties:
        playerGuess:
          type: string
          description: A string with the same number of digits as the difficulty of the room
          example: "1234"
      required:
        - playerGuess

    PlayerRoomViewDTO:
      type: object
      properties:
        roomName:
          type: string
          description: The room's unique name.
          example: "John123's room"
        host:
          type: object
          description: The room's creator represented by their Player object.
          example: Player "John123"
        difficulty:
          type: integer
          description: How many digits are generated for the mastercode.
          example: 4
        started:
          type: boolean
          description: A boolean that determines whether players can submit guesses. If started is false, players cannot submit guesses. If started is true players can submit guesses.
        completed:
          type: boolean
          description: A boolean that represents if a game has completed.
        remainingGuesses:
          type: integer
          description: How many guesses are remaining.
        guessList:
          type: array
          description: A list of the player's guesses
          items: 
            $ref: '#/components/schemas/PlayerGuess'
      required:
        - roomName
        - host
        - difficulty
        - started
        - remainingGuesses
        - guessList

    PlayerScore:
      type: object
      properties:
        id:
          type: integer
          description: Database generated unique id.
        username:
          type: string
          description: Player's username
        score:
          type: integer
          description: Tracks how many games the player has won
        difficulty:
          type: integer
          description: represents the difficulty of the game

    ErrorDetails:
      type: object
      properties:
        message:
          type: string
          description: A human-readable error message.
          example: 'username not found'
