openapi: '3.0.3'
info:
  title: API Title
  version: '1.0'
servers:
  - url: https://localhost:8080
    description: Local dev server

tags:
  - name: Players
    description: Player management operations
  - name: Rooms
    description: Game room management operations
  - name: Player Guess
    description: Player guess management operations

paths:
  /players:
    get:
      description: Returns all players in JSON
      tags:
        - Players
      responses:
        '200':
          description: Players found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          description: No players found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Server error, unable to return players
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /players/{username}:
    get:
      description: Returns the player details for a given unique username.
      tags:
        - Players
      parameters:
        - name: username
          in: path
          description: The username of the player to retrieve.
          required: true
          schema:
            type: string
          example: 'john_doe'
      responses:
        '200':
          description: Player found by username successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          description: Player not found with the given username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    delete:
      operationId: deletePlayer
      description: Deletes a player
      tags:
        - Rooms
      parameters:
        - name: roomName
          in: path
          description: The unique name of the room to delete.
          required: true
          schema:
            type: string
          example: "room1"
      responses:
        '204':
          description: Room deleted successfully
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /players/create-player:
    post:
      description: Creates a new player with a unique username
      tags:
        - Players
      requestBody:
        description: Player object to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        '201':
          description: Player created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          description: Invalid player data provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '409':
          description: A player with specified username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /rooms/secret-all-rooms:
    get:
      description: Returns all rooms
      tags:
        - Rooms
      responses:
        '200':
          description: Rooms found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: No rooms found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Server error, unable to return rooms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /rooms/{roomName}/secret:
    get:
      description: Returns room with specified room name with all data
      tags:
        - Rooms
      responses:
        '200':
          description: Room found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: Room with speficied room name not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    delete:
      operationId: deleteRoom
      description: Deletes a room with the specified room
      tags:
        - Rooms
      parameters:
        - name: roomName
          in: path
          description: The unique name of the room to delete.
          required: true
          schema:
            type: string
          example: "room1"
      responses:
        '204':
          description: Room deleted successfully
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      operationId: updateRoom
      description: Partially updates a room
      tags:
        - Rooms
      parameters:
        - name: roomName
          in: path
          required: true
          schema:
            type: string
          example: "room1"
      requestBody:
        description: RoomUpdate object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomUpdateDTO'
      responses:
        '200':
          description: Room updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'

  /rooms/{roomName}:
    get:
      description: Returns room with specified room name with limited data
      tags:
        - Rooms
      responses:
        '200':
          description: Room found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerRoomViewDTO'
        '404':
          description: Room with speficied room name not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    delete:
      operationId: deleteRoom
      description: Deletes a room with the specified room name
      tags:
        - Rooms
      parameters:
        - name: roomName
          in: path
          description: The unique name of the room to delete.
          required: true
          schema:
            type: string
          example: "room1"
      responses:
        '204':
          description: Room deleted successfully
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
    patch:
      operationId: updateRoom
      description: Partially updates a room
      tags:
        - Rooms
      parameters:
        - name: roomName
          in: path
          required: true
          schema:
            type: string
          example: "room1"
      requestBody:
        description: RoomUpdate object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomUpdateDTO'
      responses:
        '200':
          description: Room updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'

    
  /rooms/create-room:
    post:
      description: Creates a new room
      tags:
        - Rooms
      requestBody:
        description: RoomCreationDTO containing data for room creation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomUpdateDTO'
      responses:
        '201':
          description: Room created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Invalid room data provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '409':
          description: A room with specified roomName already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /rooms/{roomName}/submit-guess:
    post:
      description: Submits a client's guess to the room
      tags:
        - Rooms
        - Player Guess
      requestBody:
        description: PlayerGuess object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerGuess'
      responses:
        '201':
          description: Guess created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayerGuess'
        '400':
          description: Invalid guess data provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
        '404':
          description: Unable to find room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
  /rooms/{roomName}/reset:
    post:
      description: Resets the room, generating new masterocde and deleting all player guesses
      parameters:
        - name: roomName
          in: path
          required: true
          schema:
            type: string
          example: "room1"
      requestBody:
        description: RoomUpdate object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomUpdateDTO'
      responses:
        '200':
          description: OK


components:
  schemas:
    Player:
      type: object
      properties:
        username:
          type: string
          description: The player's unique username.
          example: "John123"
      required:
        - username

    Room:
      type: object
      properties:
        roomName:
          type: string
          description: The room's unique name.
          example: "John123's room"
        host:
          type: object
          description: The room's creator represented by their Player object.
          example: Player "John123"
        difficulty:
          type: integer
          description: How many digits are generated for the mastercode.
          example: 4
        started:
          type: boolean
          description: A boolean that determines whether players can submit guesses. If started is false, players cannot submit guesses. If started is true players can submit guesses and closed will also be set to true as once the room starts no players are allowed to join the room.
        mastercode:
          type: string
          description: A string with length the same as the room's difficulty
          example: "1234"
        guessList:
          type: array
          description: An array containing all of the player's guesses
          additionalProperties: 
            $ref: '#/components/schemas/PlayerGuess'
        completed:
          type: boolean
          description: A boolean that represents if a game has completed.
      required:
        - roomName
        - host
        - difficulty
        - started
        - mastercode
    
    RoomCreationDTO:
      properties:
        roomName:
          type: string
          description: The unique name for the room
          example: "room1"
        difficulty:
          type: integer
          description: How many digits are generated for the mastercode.
          example: 4
      required:
        - roomName
        - difficulty

    RoomUpdateDTO:
      properties:
        difficulty:
          type: integer
          description: How many digits are generated for the mastercode.
          example: 4
        started:
          type: boolean
          description: A boolean that determines whether players can submit guesses. If started is false, players cannot submit guesses. If started is true players can submit guesses.
        mastercode:
          type: boolean
          description: A boolean that determines whether the mastercode is reset. If true the mastercode is reset.

    PlayerGuess:
      properties:
        guess:
          type: string
          description: A string with the same number of digits as the difficulty of the room
          example: "1234"
        exactMatches:
          type: integer
          description: How many digits of the guess match with the mastercode
          example: 2
        feedback:
          type: string
          description: Detailed feedback including the player's guess, exactmatches, matching numbers, and remaining guesses.
        remaining guesses:
          type: integer
          description: Number of guesses remaining
      required:
        - guess
        - exactMatches
        - feedback
        - remaining guesses

    PlayerGuessDTO:
      properties:
        guess:
          type: string
          description: A string with the same number of digits as the difficulty of the room
          example: "1234"
      required:
        - guess
        
    ErrorDetails:
      type: object
      properties:
        message:
          type: string
          description: A human-readable error message.
          example: 'username not found'

    PlayerRoomViewDTO:
      type: object
      properties:
        roomName:
          type: string
          description: The room's unique name.
          example: "John123's room"
        host:
          type: object
          description: The room's creator represented by their Player object.
          example: Player "John123"
        difficulty:
          type: integer
          description: How many digits are generated for the mastercode.
          example: 4
        started:
          type: boolean
          description: A boolean that determines whether players can submit guesses. If started is false, players cannot submit guesses. If started is true players can submit guesses and closed will also be set to true as once the room starts no players are allowed to join the room.
        completed:
          type: boolean
          description: A boolean that represents if a game has completed.
        guessList:
          type: object
          description: A list of the player's guesses
          additionalProperties: 
            $ref: '#/components/schemas/PlayerGuess'
          example:
            john123:
              username: "John123"
            jane123:
              username: "jane123"
      required:
        - roomName
        - host
        - difficulty
        - started
        - guessList



        